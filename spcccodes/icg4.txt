icg4.l

%{
#include"y.tab.h"
%}
%%
[a-zA-Z]+ {strcpy(yylval.str,yytext); return Var;}
[0-9]+ {strcpy(yylval.str,yytext); return Num;}
\n {return 0;}
[ \t] {}
. {return yytext[0];}
%%
int yywrap()
{
return 1;
}

icg4.y

%{
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
char * createT(); // Declaration for creating the temporary variables
int tempcount=0; // Global variable to track the number of temporary variables
%}
%union { char str[30]; }
// Redefining the datatype of yylval using union declaration, which is int by default
%left '+'
%left '-'
%left '*'
%left '/'
%token <str> Var // Defining the datatype of Tokens as str
%token <str> Num
%type <str> s // Defining the datatypes of Non-Terminals
%type <str> exp
%%
s : Var '=' exp {printf("\n \t%s \t\t%s\n",$1,$3);}
exp : '(' exp ')' {strcpy($$,$2);}
| exp '+' exp {strcpy($$,createT()); printf("\n+\t%s\t%s\t%s",$1,$3,$$);}
| exp '-' exp {strcpy($$,createT()); printf("\n-\t%s\t%s\t%s",$1,$3,$$);}
| exp '*' exp {strcpy($$,createT()); printf("\n*\t%s\t%s\t%s",$1,$3,$$);}
| exp '/' exp {strcpy($$,createT()); printf("\n/\t%s\t%s\t%s",$1,$3,$$);}
| Num {strcpy($$,$1);}
| Var {strcpy($$,$1);}
;
%%
char * createT()
{
char snum[30],*ptr; // Declaring the string array and pointer variable
sprintf(snum,"t%d",tempcount); // Returning a formatted String
ptr=snum; // Intializing the pointer with formatted string address
tempcount++; // Temporary count
return ptr; // Returning the pointer
}
int main()
{
yyparse();
return 0;
}
int yyerror(char *err)
{
printf("\nInvlaid");
exit(0);
}
